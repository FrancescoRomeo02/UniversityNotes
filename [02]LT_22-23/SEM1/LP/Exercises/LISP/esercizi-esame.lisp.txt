;;;; definire in LISP una funzione NOPRED che ha per argomenti un predicato e una
;;;; lista che restituisce come valore la lista data come argomento SENZA gli atomi
;;;; - a qualsiasi livello di profondità - che soddisfano il predicato. Attenzione
;;;; ai NIL per mantenere la struttura della lista.
;;;;
;;;; esempio
;;;;
;;;; (nopred 'evenp '(24 5 (7) d (((4))) 3 ()))
;;;; (5 (7) ((())) 3 ())



;;;; dato il segumente programma scriverne uno che utilizzi una lambda expression

(defun funz1 (x y)
  (let ((a (* (+ (* 2 x y)) 42))
        (b (+ 2 a))
        )
    (+ (* a (quadrato x))
       (+ b y)
       (* a b))))

;;;; definire in LISP la funzione VARIANCE che, presa una lista in ingresso, e un
;;;; parametro &key chiamato, per l'appunto key, restituisce la varianza dei valori
;;;; presenti in ogni elemento (estratti con la funzione associata a key). Potete
;;;; assumere di avere a disposizione una funzione AVERAGE che prende gli stessi
;;;; argomenti di VARIANCE, e che ritorna la media degli elementi nella lista in
;;;; ingresso sempre con le stesse convenzioni sui parametri. 
;;;; La formula per la varianza di una variabile casuale X è Var(X) = E[(X - micro)^2]

;;;; (defun variance)

;;;; dato il segumente programma scriverne uno che utilizzi una let

(defun funz2 (x y)
  ((lambda (b a)
     (+ (* a (quadrato x))
        (* y b)
        (* a b)))
   (* 2 y)
   (* x (+ 1 y))))

;;;; definire la funzione AVERAGE che, presa una lista in ingresso, e un parametro &key
;;;; chiamato, per l'appunto key, restituisce la media dei valori presenti in ogni
;;;; elemento (estratti con la funzione associata a key)

;;;; (defun average)

;;;; dato il seguente programma scriverne uno che utilizzi una let

(defun funz3 (x y)
  ((lambda (a b)
     (+ (* x a)
        (* y (quadrato b))
        (* a b)))
   (* x y)
   (* 4 y)))

;;;; definire una funzione che ha per argomento una lista e restituisce la lista
;;;; con lo stesso numero di elementi, ottenuta applicando la
;;;; funzione per-due ai soli atomi numerici dispari a qualsiasi livello di profonditò.
;;;; La funzione per-due raddoppia l'argomento che riceve se questo è un numero.

;;;; (defun )

;;;; dato il seguente programma scriverne uno equivalente che utilizzi una lambda exp

(defun funz4 (x y)
  (let ((a (* (sin (* 2 x y)) pi))
        (b (* 2 a))
        )
    (+ (* a (quadrato x))
       (* y b)
       (* a b))))

;;;; definire una funzione che ha per argomento un albero (ovvero una lista) e lo
;;;; restituisce, sostituendo, a qualsiasi livello di profondità, gli atomi numerici
;;;; pari con il risultato dell'applicazione della funzione aggiungi-42. La funzione
;;;; aggiungi-42 aggiunge il numero fondamentale al valore numero.

;;;; (defun )

;;;; dato il seguente programma scriverne uno equivalente che utilizzi una lambda exp

(defun funz5 (x y)
  (let ((a (+ x (* x y)))
        (b (* 4 y))
        )
    (lambda (y x)
      (+ (* x a)
         (* y (quadrato b))
         (* a b)))))

;;;; definire la funzione AGGIUNGI1 che ha per argomento una lista e restituisce la
;;;; lista con lo stesso numero di elementi ottenuta aggiungendo un'unità ai soli atomi
;;;; numerici dispari a qualsiasi livello di profondità

;;;; (defun )

;;;; dato il seguente programma scriverne uno equivalente che utilizzi una lambda exp

(defun funz6 (x y)
  (let ((a (+ x (* x y)))
        (b (* 4 y))
        )
    (+ (* x a)
       (* y (quadrato b))
       (* a b))))

;;;; Costruite la funzione reduce(o chiamata anche fold1) che prende una funzione 
;;;; binaria e una lista e produce come risultato la combinazione (associativa a sinistra)
;;;; degli elementi della list. Potete assumere che la lista abbia almeno due elementi.

;;;; (defun reduce)

;;;; definire la funzione COMPOSE che ritorna una funzione che è la composizione
;;;; di due funzioni passatele come argomenti (tutte le funzioni prendono
;;;; un solo argomento).

;;;; (defun compose)

;;;; si consideri la seguente espressione aritmetica
;;;;      tan(pi * 4.2) / (12 - e * 3) + 1024
;;;;
;;;; 1. Riscrivetela in forma di S-expression.
;;;; 2. Scrivete una funzione value che ritorni il valore dell'espressione rappresentata da
;;;;    S-espressioni di questo tipo; considerate solo le costanti pi ed e, e gli operatori
;;;;    +, -, /, sin, cos e tan. Se vi servono delle funzioni ausiliarie, scrivetele pure.


;;;; definire la funzione transpose che prenda in ingresso due liste e le trasponga.